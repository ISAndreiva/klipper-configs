

[gcode_macro START_PRINT]
gcode:
  {% set bedtemp = params.BED|int %}
  {% set hotendtemp = params.HOTEND|int %}
  {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}
  {% set mesh_center = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_center %}
  {% set clear_mesh = params.CLEAR_MESH|default(1)|int %}

  {% if clear_mesh == 1 %}
    BED_MESH_CLEAR
  {% endif %}
  M106 S0
  G90 ; use absolute coordinates
  M83 ; extruder relative mode
  M104 S{hotendtemp - 40}
  M140 S{bedtemp} ; set bed temp
  status_heating
  SET_LED LED=enclosure WHITE=0.1
  HOME_UNHOMED
  status_heating
  M109 S{hotendtemp - 40}
  CLEAN_NOZZLE PURGE_RETRACT=1
  G28 Z0
  M190 S{bedtemp} ; wait for bed temp
  status_calibrating_z
  COMPUTE_MESH_PARAMETERS SIZE={FL_SIZE}
  CALIBRATE_Z
  M104 S{hotendtemp} ; set extruder temp
  status_meshing
  ADAPTIVE_BED_MESH
  DOCK_PROBE
  status_heating
  M109 S{hotendtemp} ; wait for extruder temp
  status_printing
  CLEAN_NOZZLE PURGE_RETRACT=0
  G92 E0
  

[gcode_macro MATERIAL_CONFIG]
gcode:
  {% set MATERIAL = params.MATERIAL|string %}
  {% if MATERIAL == "ABS" %}
    SET_PRESSURE_ADVANCE ADVANCE=0.025
  {% endif %}
  {% if MATERIAL == "ASA" %}
    SET_PRESSURE_ADVANCE ADVANCE=0.025
  {% endif %}
  {% if MATERIAL == "PLA" %}
    SET_PRESSURE_ADVANCE ADVANCE=0
  {% endif %}

#[gcode_macro PURGE_CLEAN]
#gcode: 
#  SAVE_GCODE_STATE NAME=clean_purge_nozzle
#  G90
#  G1 Z10
#  G1 Y0 X270 F3000
#  {% if printer.extruder.temperature >= 180 %}
#    G1 Z-3
#    M83      ; relative mode
#    G1 E15 F{3 * 60}
#   ; G1 E-8 F{40 * 60}  
#    G4 P{1000}
#    G92 E0   ; reset extruder
#  {% endif %}
#  G1 Y25 F3000
#  G4 P30
#  G91
#  {% for i in range(5) %}
#        G1 X10 F3000
#        G1 X-20  F3000
#        G1 X10 F3000
#  {% endfor %}
#  G1 Z20 F1000
#  G90
#  RESTORE_GCODE_STATE NAME=clean_purge_nozzle

[gcode_macro PRIME_LINE]
description: Print an extruder priming line with optional purge and easy removal handle
gcode:
    # settings
    {% set line = {
      'x_padding'      : params.XPAD|default(0)|float,  # left/right padding around the bed the line can't print into
      'y_padding'      : params.YPAD|default(45)|float,  # top/bottom padding around the bed the line can't print into
      'initial_purge'  : params.PURGE|default(8)|int,   # mm of filament to purge before printing. set to 0 to disable
      'retract_after'  : params.RETRACT|default(1)|int, # mm of filament to retract after printing. set to 0 to disable
      'length'         : params.LENGTH|default(150)|int,   # mm, length of the prime line
      'print_speed'    : params.PRINT_SPEED|default(30)|int,
      'travel_speed'   : params.TRAVEL_SPEED|default(200)|int,
      'extr_multi'     : params.EXTRUSION_MULTIPLIER|default(1.25)|float,  # apply to prime lines
      'overlap_percent': 80, # how much prime lines overlap each other
    } %}
    {% set handle = {
      'do_print'    : params.PRINT_HANDLE|default(1)|int,  # set to 0 to disable printing the handle
      'fan_percent' : params.HANDLE_FAN|default(75)|int,   # without fan the handle is too small and melty to print upright
      'width'       : 5.0,
      'height'      : 5.0,
      'move_away'   : 60   # how much to move the toolhead away from the printed handle once done. set 0 to disable
    } %}
    {% set nozzle_diameter = params.NOZZLE|default(printer.configfile.config['extruder'].nozzle_diameter|float)|float %}

    # sanity check and computed variables
    {% set max_x, max_y = printer.toolhead.axis_maximum.x|float, printer.toolhead.axis_maximum.y|float %}
    {% set _ = line.update({'width': nozzle_diameter * 1.25, 'height': nozzle_diameter / 2, 'length': [range(line.length-10,line.length+10)|random, max_x - 2 * line.x_padding - 2]|min}) %}
    {% set _ = line.update({'e_per_mm': line.extr_multi * (line.width * line.height) / (3.1415 * (1.75/2)**2), 'x_start': max_x / 2 - line.length / 2, 'y_start': line.y_padding })  %}

    SAVE_GCODE_STATE NAME=STATE_PRIME_LINE

    {action_respond_info('Printing prime line')}
    M117 Prime Line
    G90 # absolute positioning
    G0 X{line.x_start} Y{line.y_start + (handle.width / 2)|int + 1} Z{line.height} F{line.travel_speed * 60} # move to starting position
    G91 # relative positioning
    G1 E{line.initial_purge} F{5 * 50} # extrude at ~12mm3/sec
    G0 F{line.print_speed * 60} # set print speed
    G1 X{line.length} E{line.length * line.e_per_mm} # print forward line
    G0 Y{line.width * line.overlap_percent / 100} # overlap forward line
    G1 X-{line.length / 2} E{(line.length / 2) * line.e_per_mm}  # print backward line for half the length

    # print a handle for easy removal
    {% if handle.do_print != 0 and handle.width != 0 and handle.height != 0 %}
      G0 X{line.length / 2 - handle.width} Y{handle.width / 2} F{line.travel_speed * 60} # move into position for printing handle
      G0 F{line.print_speed * 60} # set print speed
      {% set saved_fan_speed = (printer['fan'].speed * 256)|int %}
      M106 S{((handle.fan_percent / 100) * 256)|int} # set part fan to desired speed
      {% for _ in range((line.height * 1000)|int, (handle.height * 1000)|int, (line.height * 1000)|int) %} # loop however many cycles it takes to print required handle height
        G1 Y{loop.cycle(-1.0, 1.0) * handle.width} E{handle.width * line.e_per_mm} # handle layer
        G0 X-{line.width * 0.2} Z{line.height} # move up and shift the layer to make the handle sloping
      {% endfor %}
      M106 S{saved_fan_speed} # restore previous part fan speed
    {% endif %}
    
    G1 E-{line.retract_after} F{40 * 60} # retract ar 50mm/sec after printing
    G0 Y{handle.move_away} F{line.travel_speed * 60}
    M117

    RESTORE_GCODE_STATE NAME=STATE_PRIME_LINE

[gcode_macro END_PRINT]
gcode:
  G91
  G1 Z 10
  G1 E -10
  G90
  M140 S0 ; turn off heatbed
  M104 S0 ; turn off temperature
  M107 ; turn off fan
  M73 R0 P0
  G1 X144 Y330 F3000
  SET_LED LED=enclosure WHITE=0
  status_part_ready

[gcode_macro HOME_UNHOMED]
gcode:
    {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
      G28
      G91 # relative positioning
      G1 Z10 F1000
      G90 ; Set coordinates to absolute
#      SET_GCODE_OFFSET Z=-0.175
    {% endif %}